openapi: "3.0.0"
info:
  version: 1.0.0
  title: Shop imitation
  license:
    name: MIT
servers:
  - url: http://localhost:8081
paths:
  /products:
    get:
      description: Get list of all products.
      operationId: getProductList
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: list size limit
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Product was succesfully found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new product in repository
      operationId: addProduct
      requestBody:
        description: Product to add to the repository
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product was succesfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    get:
      description: Returns Product with a specified ID if it exists
      operationId: findProductByID
      parameters:
        - name: id
          in: path
          description: ID of Product
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
            description: Product with id was succesfully founded.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single Product with specified ID from repository
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of Product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product was deleted from repository
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateProduct
      description: update Product with a specified ID
      parameters:
        - name: id
          in: path
          description: ID of Product to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product to update in the repository
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: New Product was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Product:
      allOf:
        - $ref: '#/components/schemas/NewProduct'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
    NewProduct:
      type: object
      required:
        - name
        - count
      properties:
        name:
          type: string
        count:
          type: integer
          format: int32
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
